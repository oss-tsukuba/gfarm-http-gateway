ERR() {
    echo >&2 "Error:" "$@"
}

common_help() {
    echo "Common options:"
    echo "  -h  Show this help message."
    echo "  -k  Insecure connection."
    echo "  -v  Verbose mode."
    echo "Enviroment variable:"
    echo "  GFARM_HTTP_URL    base URL of gfarm-http-gateway. (required)"
}

opts=()
opt_insecure=0
opt_verbose=0

common_getopt() {
    shopt -s extglob  # pattern for case
    local opts_ext="$1"
    local opts_ext_patt="$2"
    local opts_ext_func="$3"
    shift 3
    local opt
    local opts_all="khv${opts_ext}"
    local patt
    if [ -n "$opts_ext_patt" ]; then
        patt="@(${opts_ext_patt})"
    else
        patt=NOOPT
    fi
    while getopts "$opts_all" opt; do
        case $opt in
            k)
                opt_insecure=1
                ;;
            v)
                opt_verbose=1
                set -x
                ;;
            h)
                help
                exit 0
                ;;
            $patt)
                $opts_ext_func $opt
                ;;
            \?)
                ERR "Unknown option"
                help
                exit 1
                ;;
        esac
    done
    optind=$OPTIND

    #opts+=("--fail")  # TODO
    opts+=("--fail-with-body")  # curl 7.76.0 or later
    if [ $opt_verbose -eq 1 ]; then
        opts+=("-v")
    else
        opts+=("--no-progress-meter")
    fi
    if [ $opt_insecure -eq 1 ]; then
        opts+=("-k")
    fi
}

remove_left_slash() {
    sed 's/^\/*//'
}

remove_right_slash() {
    sed 's/\/*$//'
}

urlencode() {
    jq -Rr @uri
}

urlpathencode() {
    remove_left_slash | urlencode | sed 's|%2F|/|g'
}

get_url_base() {
    if [ -z "${GFARM_HTTP_URL:-}" ]; then
        ERR "GFARM_HTTP_URL is required"
        help
        exit 1
    fi
    echo "$GFARM_HTTP_URL" | remove_right_slash
}

get_url_params_str() {
    if [ ${#params[@]} -gt 0 ]; then
        url_params="?"$(IFS='&'; echo "${params[*]}")
    else
        url_params=""
    fi
    echo $url_params
}
